#!/usr/bin/env php
<?php
require_once 'libraries';
require_once ROOT_PATH . 'version.php';

define('MAJ_PATH', PATCH_PATH . DS . 'Maj' . DS);

/**
 * Execute les fichiers de mise à jour et retourne la version du dernier patch
 */
function executePatchs(string $versionDerniereMAJ) : string
{
    $patchInstalled = "0.0.0";
    $patches = glob(MAJ_PATH . '*.sql');
    natsort($patches);
    foreach ($patches as $filename) {
        if (version_compare(basename($filename, '.sql'), $versionDerniereMAJ, '>')) {
            $patchInstalled = basename($filename, '.sql');
            execute_sql_file($filename);
        }
    }

    return $patchInstalled;
}

function resetToken(\includes\SQL $db) : bool
{
    $db->query('UPDATE `conges_appli` SET appli_valeur =  "' . hash('sha256', time() . rand()) . '" WHERE appli_variable = "token_instance"');

    return 0 < $db->affected_rows;
}

function setInstalledVersion(\includes\SQL $db, $versionCode) : bool
{
    $req = "UPDATE conges_config SET conf_valeur = '$versionCode' WHERE conf_nom = 'installed_version' ";
    $db->query($req);

    return 0 < $db->affected_rows;
}

/**
 * Définit les données de configuration pour l'API
 *
 * @param array $data Données de configuration
 */
function setDataConfigurationApi(array $dbConfiguration, array $ldapConfiguration) : bool
{
    $data = [
        'db' => [
            'serveur' => $dbConfiguration['serveur'],
            'base' => $dbConfiguration['base'],
            'utilisateur' => $dbConfiguration['utilisateur'],
            'mot_de_passe' => $dbConfiguration['mot_de_passe'],
        ],
        'ldap' => [
            'serveur' => $ldapConfiguration['serveur'],
            'protocol' => $ldapConfiguration['protocol'],
            'up_serveur' => $ldapConfiguration['up_serveur'],
            'base' => $ldapConfiguration['base'],
            'utilisateur' => $ldapConfiguration['utilisateur'],
            'mot_de_passe' => $ldapConfiguration['mot_de_passe'],
            'domaine' => $ldapConfiguration['domaine'],
            'prenom' => $ldapConfiguration['prenom'],
            'nom' => $ldapConfiguration['nom'],
            'mail' => $ldapConfiguration['mail'],
            'login' => $ldapConfiguration['login'],
            'nom_affiche' => $ldapConfiguration['nom_affiche'],
            'filtre' => $ldapConfiguration['filtre'],
            'filtre_recherche' => $ldapConfiguration['filtre_recherche'],
        ],
    ];

    return file_put_contents(API_SYSPATH . 'configuration.json', json_encode($data));
}

display('Mise à jour…');
display('Contrôles généraux…');
if (!\includes\SQL::existsDatabase($mysql_database)) {
    displayError('Application non installée');
}
$db = \includes\SQL::singleton();
$versionDerniereMAJ = getVersionDerniereMiseAJour($db, getInstalledVersion());

display('Configuration de l\'API');
$dbConfiguration = [
    'serveur' => $mysql_serveur,
    'base' => $mysql_database,
    'utilisateur' => $mysql_user,
    'mot_de_passe' => $mysql_pass,
];
$ldapConfiguration = [
    'serveur' => $config_ldap_server ?? '',
    'protocol' => $config_ldap_protocol_version ?? '',
    'up_serveur' => $config_ldap_bupsvr ?? '',
    'base' => $config_basedn ?? '',
    'utilisateur' => $config_ldap_user ?? '',
    'mot_de_passe' => $config_ldap_pass ?? '',
    'domaine' => $config_searchdn ?? '',
    'prenom' => $config_ldap_prenom ?? '',
    'nom' => $config_ldap_nom ?? '',
    'mail' => $config_ldap_mail ?? '',
    'login' => $config_ldap_login ?? '',
    'nom_affiche' => $config_ldap_nomaff ?? '',
    'filtre' => $config_ldap_filtre ?? '',
    'filtre_recherche' => $config_ldap_filrech ?? '',
];
if (!setDataConfigurationApi($dbConfiguration, $ldapConfiguration)) {
    displayFail();
}

display('Application des nouveaux patches…');
list($major, $minor, $patch) = explode('.', executePatchs($versionDerniereMAJ));
$versionMaj = implode('.', [$major, $minor, $patch]);

// Le seul cas qui amènerait à ce que la version ait cette valeur ici
// est qu'aucun script ne soit supérieur la version courante
if ('0.0.0' === $versionMaj) {
    display('Aucune mise à jour disponible');
    exit();
}

display('Définition du token d\'instance…');
if (!resetToken($db)) {
    displayFail();
}

display('Définition de la version…');
if (!setInstalledVersion($db, $config_php_conges_version)) {
    displayFail();
}

display('Inscription de la dernière version…');
if(!setLastMaj($db, $versionMaj)) {
    displayFail();
}

display('Mise à jour effectuée avec succès.');
