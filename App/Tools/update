#!/usr/bin/env php
<?php
require_once 'libraries';
require_once ROOT_PATH . 'version.php';

define('BACKUP_PATH', ROOT_PATH . 'backup' . DS);
define('MAJ_PATH', PATCH_PATH . DS . 'Maj' . DS);

/**
 *
 */
function getVersionDerniereMiseAJour(\includes\SQL $db, string $installedVersion) : string
{
    $req = 'SELECT appli_valeur FROM conges_appli WHERE appli_variable = "version_last_maj" LIMIT 1';
    $res = $db->query($req);
    $versionLastMaj = $res->fetch_array()['appli_valeur'];
    $versionFile = file_get_contents('/tmp/lt-last-version');
    if (!empty($versionLastMaj)) {
        return $versionLastMaj;
    } elseif ($versionFile) {
        // @TODO: Compat with <1.12 versions
        return $versionFile;
    }

    return $installedVersion . '.0';
}

/**
 * Execute les fichiers de mise à jour et retourne la version du dernier patch
 */
function executePatchs(string $versionDerniereMAJ) : string
{
    $currentPatch = "0.0";
    $patches = glob(MAJ_PATH . '*.sql');
    natsort($patches);
    foreach ($patches as $filename) {
        $currentPatch = basename($filename, '.sql');
        if (version_compare($currentPatch, $versionDerniereMAJ, '>')) {
            execute_sql_file($filename);
        }
    }

    return $currentPatch;
}

function resetToken(\includes\SQL $db) : bool
{
    $db->query('UPDATE `conges_appli` SET appli_valeur =  "' . hash('sha256', time() . rand()) . '" WHERE appli_variable = "token_instance"');

    return 0 < $db->affected_rows;
}

function setInstalledVersion(\includes\SQL $db, $versionCode) : bool
{
    $req = "UPDATE conges_config SET conf_valeur = '$versionCode' WHERE conf_nom = 'installed_version' ";
    $db->query($req);

    return 0 < $db->affected_rows;

}

echo 'Mise à jour vers la dernière version…', "\n";
$installedVersion = getInstalledVersion();
$db = \includes\SQL::singleton();
$versionDerniereMAJ = getVersionDerniereMiseAJour($db, $installedVersion);

// Quelques vérifications de base…
if ('0.0' == $versionDerniereMAJ) {
    displayError('l\'application n\'est pas encore installée.');
}

try {
    \admin\Fonctions::sauvegardeAsFile($installedVersion, 'end');
} catch (\Exception $e) {
    displayError('Sauvegarde impossible');
}


list($major, $minor,) = explode('.', executePatchs($versionDerniereMAJ));
$versionMaj = $major . '.' . $minor;

// Le seul cas qui amènerait à ce que la version ait cette valeur ici
// est qu'aucun script ne soit supérieur la version courante
if ('0.0' === $versionMaj) {
    displayError('Aucun nouveau patch');
}

if (!resetToken($db)) {
    displayError('Définition du token échouée');
}

if (!setInstalledVersion($db, $config_php_conges_version)) {
    displayError('Définition de version');
}

if(!setLastMaj($db, $versionMaj)) {
    displayError('Mise à jour du patch échouée');
}

echo 'Mise à jour terminée avec succès.', "\n";
